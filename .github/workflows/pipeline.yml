name: CI/CD Pipeline for Node.js and Python with Heroku

on:
  push:
    branches:
      - develop  
  pull_request:
    branches:
      - develop  

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    
      # Clonar el repositorio
      - name: Checkout code
        uses: actions/checkout@v3

      # Configurar Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Autenticación en Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Construcción y subida de imágenes a Docker Hub
      - name: Build and push Docker images
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/node-app:latest
            ${{ secrets.DOCKER_USERNAME }}/python-app:latest

      # Instalación de Heroku CLI
      - name: Install Heroku CLI
        run: |
          curl https://cli-assets.heroku.com/install.sh | sh

      # Validación de claves de Heroku
      - name: Validate Heroku credentials
        run: |
          if [ -z "${{ secrets.HEROKU_API_KEY }}" ]; then
            echo "HEROKU_API_KEY is not set"; exit 1;
          fi
          if [ -z "${{ secrets.HEROKU_NODE_APP_NAME }}" ]; then
            echo "HEROKU_NODE_APP_NAME is not set"; exit 1;
          fi
          if [ -z "${{ secrets.HEROKU_PYTHON_APP_NAME }}" ]; then
            echo "HEROKU_PYTHON_APP_NAME is not set"; exit 1;
          fi

      # Autenticación en Heroku Registry
      - name: Login to Heroku Container Registry
        run: |
          echo "${{ secrets.HEROKU_API_KEY }}" | docker login --username=_ --password-stdin registry.heroku.com

      # Construcción de la imagen Docker para Node.js
      - name: Build Docker image for Node.js
        run: |
          docker build -t registry.heroku.com/${{ secrets.HEROKU_NODE_APP_NAME }}/web -f Dockerfile.node .

      # Construcción de la imagen Docker para Python
      - name: Build Docker image for Python
        run: |
          docker build -t registry.heroku.com/${{ secrets.HEROKU_PYTHON_APP_NAME }}/web -f Dockerfile.python .

      # Subida de la imagen Node.js a Heroku
      - name: Push Node.js Docker image to Heroku
        run: |
          docker push registry.heroku.com/${{ secrets.HEROKU_NODE_APP_NAME }}/web

      # Subida de la imagen Python a Heroku
      - name: Push Python Docker image to Heroku
        run: |
          docker push registry.heroku.com/${{ secrets.HEROKU_PYTHON_APP_NAME }}/web

      # Despliegue de la aplicación Node.js en Heroku
      - name: Release Node.js container on Heroku
        run: |
          heroku container:release web --app ${{ secrets.HEROKU_NODE_APP_NAME }}

      # Despliegue de la aplicación Python en Heroku
      - name: Release Python container on Heroku
        run: |
          heroku container:release web --app ${{ secrets.HEROKU_PYTHON_APP_NAME }}


  # deploy-with-terraform:
  #   runs-on: ubuntu-latest
  #   needs: build-and-deploy
  #   steps:

  #     - name: Checkout code
  #       uses: actions/checkout@v3 
   
  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v2
  #       with:
  #          terraform_wrapper: false
        
  #     - name: Terraform Init
  #       run: terraform init
      
  #     - name: Terraform Plan
  #       run: terraform plan        
      
  #     - name: Terraform Apply
  #       run: terraform apply -auto-approve
